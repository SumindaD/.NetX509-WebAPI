namespace SurityTrial.Migrations
{
    using SurityTrial.Models;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<SurityTrial.Context.SurityDBContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = true;
        }

        protected override void Seed(SurityTrial.Context.SurityDBContext context)
        {
            var privateKeyBase64 = "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";
            var publicKeyBase64 = "MIIE5gIBAzCCBKIGCSqGSIb3DQEHAaCCBJMEggSPMIIEizCCBIcGCSqGSIb3DQEHBqCCBHgwggR0AgEAMIIEbQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQIsW5FY5sbIuICAgfQgIIEQF0+d8Sl+/adik/eX2dw88q0UrKM9N31beGUOzKF3ApHkOPxYOlod/D2V38ot1TxJ1SdpHrg788sfgi9qYDGM1OSrC9HEnffQEwFH6aluMMnBmT+3jAekc67gkJ48PTuaFu1ZUpxvJllMkfJtgIsvdSrxsC20RP/MSVxNHDgwzTWAr+K1798QykxBEGLvsOVN2L+RdD67DXANeDZWOPRvOQUBPS0r44H04TtnnPt3MVRHAX9H/lQPtuv6tURhOWgcTfHJ1l+im47y3SkY8+E0I1lK16JLX5rJa59eESiiBGEuOTYq943MrVnNyr8krz/kjsuGs6tMv1VKhnYOBavshxUPtmhWjQs31QdNPQTCMme99ViewAoFjtN3PqfjF/Dmp7n13uLDJNeP8so9DV1rLteQMDWdOTpVCxIaXcKtdEzdG1aZ+upFrJ7svngbF7gqXbc2tOW8PagiVhMpYAWTFzxTvtND/4wPTKWVhw5Fi2iVgjCKe+Tuq9+VuyqCzQcAM84BU1iBk120fajB/4fjrG/84ge2VLHaVzKUDplZ7hq5T2xpQvcO2eRHWfUAotPt40rDxOZB7lqF/g2K7NkI1vX8l3vJwqPNChN/ptnV1edvvH2zoVLaFUR6LS6F56srJIbRtxzJgzaJzForh4qKWsG6X597G0pxuZL0p++X3nNBrc1rGbZijXSU05/+Por11IC4SonTWOiJhj7RQqGluvx+KlpFSIVuoyiM7kHd8oVD299o3JLIk5d68w4jH4L7vyB1mS/8+bEL+v5vAcyed6UwiSsjo4/wxCo1EhofaK6qVoOwQtNcVLZwHQpdbgpO5TTzoPRzB9Y1wweKASyPycXc/5ORk4+SLiYXql3VWutW3DXgr1gq3fHRN3xLFzFsqc2jLi9PytebuEc255FQDuSlcFKB6v3ZJfAvPl2qkKB0BS8UMFXoMF2BB6Vw4kJamQIe/7sm7ZRkLcB6ch7UIsWGfLDGBF4FX1XsQVl0krKoufbatSWHIRqMdgm49V8qL4XdnHvfKpBY0Qfo31uj6HYoDNdnOq3C8oY0drIqti2sHXWjuuiIcIZMf3+cyctDMRC6vUaKGe637PFiFAnCvi7lg8K1nP645XMp693Y9deoFdlny4EUdVR4chlld6vg9W9anx2pVpyX4ienjxrLEWg8Zj5Gq8cUVRcDaEwL5Gm/+zdgZEw+ORFBjLHa56/gg08Vl7vE2RpREgkvQ3GJh7KIb632KPPO9Zbiumfw6uDelnSb7dg3bYw8Woq8Jxx2gpC5n8gcQR1qcM1Rjo7BAAgeQWljBuGIE5t4IM1hg6ZlV5Eav9kxvMX5e8i7efHXEi91i200N+oOHg761W2djbpJGcuFVh4M6DiIv8gyMDPPel4S+8ad9LtsrIXQb5jJ24f8+CJEPzPzEEwWAup0PovXOIOmTukX+L2937ff17bMDswHzAHBgUrDgMCGgQUHJZvfvefEv6UxdJ4wTGoWoOz/5MEFOby3IqtoMwl5ab/hWJPn3DFKJLRAgIH0A==";

            var digitalCertificate = new DigitalCertificate();

            digitalCertificate.PrivateKey = Convert.FromBase64String(privateKeyBase64);
            digitalCertificate.PublicKey = Convert.FromBase64String(publicKeyBase64);

            context.DigitalCertificate.AddOrUpdate(digitalCertificate);
            context.SaveChanges();
        }
    }
}
